{"version":3,"sources":["libs/CLDRPluralRuleParser/src/CLDRPluralRuleParser.js"],"names":["root","factory","define","amd","exports","module","pluralRuleParser","rule","number","split","replace","length","pos","operand","expression","relation","result","whitespace","makeRegexParser","value","_n_","makeStringParser","_i_","_f_","_t_","_v_","_w_","_is_","_isnot_","_isnot_sign_","_equal_","_mod_","_percent_","_not_","_in_","_within_","_range_","_comma_","_or_","_and_","debug","choice","parserSyntax","i","sequence","parserRes","originalPos","push","nOrMore","n","p","parsed","s","len","substr","regex","matches","match","parseInt","parseFloat","f","t","v","w","mod","not","is","isnot","not_in","range_list","rangeList","range","rangeTail","resultList","concat","array","left","right","_in","within","and","andTail","orTail","condition","Error","toString"],"mappings":"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","file":"CLDRPluralRuleParser.a7fb383c.map","sourceRoot":"../src","sourcesContent":["/**\n * cldrpluralparser.js\n * A parser engine for CLDR plural rules.\n *\n * Copyright 2012-2014 Santhosh Thottingal and other contributors\n * Released under the MIT license\n * http://opensource.org/licenses/MIT\n *\n * @source https://github.com/santhoshtr/CLDRPluralRuleParser\n * @author Santhosh Thottingal <santhosh.thottingal@gmail.com>\n * @author Timo Tijhof\n * @author Amir Aharoni\n */\n\n/**\n * Evaluates a plural rule in CLDR syntax for a number\n * @param {string} rule\n * @param {integer} number\n * @return {boolean} true if evaluation passed, false if evaluation failed.\n */\n\n// UMD returnExports https://github.com/umdjs/umd/blob/master/returnExports.js\n(function(root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine(factory);\n\t} else if (typeof exports === 'object') {\n\t\t// Node. Does not work with strict CommonJS, but\n\t\t// only CommonJS-like environments that support module.exports,\n\t\t// like Node.\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser globals (root is window)\n\t\troot.pluralRuleParser = factory();\n\t}\n}(this, function() {\n\nfunction pluralRuleParser(rule, number) {\n\t'use strict';\n\n\t/*\n\tSyntax: see http://unicode.org/reports/tr35/#Language_Plural_Rules\n\t-----------------------------------------------------------------\n\tcondition     = and_condition ('or' and_condition)*\n\t\t('@integer' samples)?\n\t\t('@decimal' samples)?\n\tand_condition = relation ('and' relation)*\n\trelation      = is_relation | in_relation | within_relation\n\tis_relation   = expr 'is' ('not')? value\n\tin_relation   = expr (('not')? 'in' | '=' | '!=') range_list\n\twithin_relation = expr ('not')? 'within' range_list\n\texpr          = operand (('mod' | '%') value)?\n\toperand       = 'n' | 'i' | 'f' | 't' | 'v' | 'w'\n\trange_list    = (range | value) (',' range_list)*\n\tvalue         = digit+\n\tdigit         = 0|1|2|3|4|5|6|7|8|9\n\trange         = value'..'value\n\tsamples       = sampleRange (',' sampleRange)* (',' ('…'|'...'))?\n\tsampleRange   = decimalValue '~' decimalValue\n\tdecimalValue  = value ('.' value)?\n\t*/\n\n\t// We don't evaluate the samples section of the rule. Ignore it.\n\trule = rule.split('@')[0].replace(/^\\s*/, '').replace(/\\s*$/, '');\n\n\tif (!rule.length) {\n\t\t// Empty rule or 'other' rule.\n\t\treturn true;\n\t}\n\n\t// Indicates the current position in the rule as we parse through it.\n\t// Shared among all parsing functions below.\n\tvar pos = 0,\n\t\toperand,\n\t\texpression,\n\t\trelation,\n\t\tresult,\n\t\twhitespace = makeRegexParser(/^\\s+/),\n\t\tvalue = makeRegexParser(/^\\d+/),\n\t\t_n_ = makeStringParser('n'),\n\t\t_i_ = makeStringParser('i'),\n\t\t_f_ = makeStringParser('f'),\n\t\t_t_ = makeStringParser('t'),\n\t\t_v_ = makeStringParser('v'),\n\t\t_w_ = makeStringParser('w'),\n\t\t_is_ = makeStringParser('is'),\n\t\t_isnot_ = makeStringParser('is not'),\n\t\t_isnot_sign_ = makeStringParser('!='),\n\t\t_equal_ = makeStringParser('='),\n\t\t_mod_ = makeStringParser('mod'),\n\t\t_percent_ = makeStringParser('%'),\n\t\t_not_ = makeStringParser('not'),\n\t\t_in_ = makeStringParser('in'),\n\t\t_within_ = makeStringParser('within'),\n\t\t_range_ = makeStringParser('..'),\n\t\t_comma_ = makeStringParser(','),\n\t\t_or_ = makeStringParser('or'),\n\t\t_and_ = makeStringParser('and');\n\n\tfunction debug() {\n\t\t// console.log.apply(console, arguments);\n\t}\n\n\tdebug('pluralRuleParser', rule, number);\n\n\t// Try parsers until one works, if none work return null\n\tfunction choice(parserSyntax) {\n\t\treturn function() {\n\t\t\tvar i, result;\n\n\t\t\tfor (i = 0; i < parserSyntax.length; i++) {\n\t\t\t\tresult = parserSyntax[i]();\n\n\t\t\t\tif (result !== null) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n\n\t// Try several parserSyntax-es in a row.\n\t// All must succeed; otherwise, return null.\n\t// This is the only eager one.\n\tfunction sequence(parserSyntax) {\n\t\tvar i, parserRes,\n\t\t\toriginalPos = pos,\n\t\t\tresult = [];\n\n\t\tfor (i = 0; i < parserSyntax.length; i++) {\n\t\t\tparserRes = parserSyntax[i]();\n\n\t\t\tif (parserRes === null) {\n\t\t\t\tpos = originalPos;\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tresult.push(parserRes);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// Run the same parser over and over until it fails.\n\t// Must succeed a minimum of n times; otherwise, return null.\n\tfunction nOrMore(n, p) {\n\t\treturn function() {\n\t\t\tvar originalPos = pos,\n\t\t\t\tresult = [],\n\t\t\t\tparsed = p();\n\n\t\t\twhile (parsed !== null) {\n\t\t\t\tresult.push(parsed);\n\t\t\t\tparsed = p();\n\t\t\t}\n\n\t\t\tif (result.length < n) {\n\t\t\t\tpos = originalPos;\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\t}\n\n\t// Helpers - just make parserSyntax out of simpler JS builtin types\n\tfunction makeStringParser(s) {\n\t\tvar len = s.length;\n\n\t\treturn function() {\n\t\t\tvar result = null;\n\n\t\t\tif (rule.substr(pos, len) === s) {\n\t\t\t\tresult = s;\n\t\t\t\tpos += len;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\t}\n\n\tfunction makeRegexParser(regex) {\n\t\treturn function() {\n\t\t\tvar matches = rule.substr(pos).match(regex);\n\n\t\t\tif (matches === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tpos += matches[0].length;\n\n\t\t\treturn matches[0];\n\t\t};\n\t}\n\n\t/**\n\t * Integer digits of n.\n\t */\n\tfunction i() {\n\t\tvar result = _i_();\n\n\t\tif (result === null) {\n\t\t\tdebug(' -- failed i', parseInt(number, 10));\n\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = parseInt(number, 10);\n\t\tdebug(' -- passed i ', result);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Absolute value of the source number (integer and decimals).\n\t */\n\tfunction n() {\n\t\tvar result = _n_();\n\n\t\tif (result === null) {\n\t\t\tdebug(' -- failed n ', number);\n\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = parseFloat(number, 10);\n\t\tdebug(' -- passed n ', result);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Visible fractional digits in n, with trailing zeros.\n\t */\n\tfunction f() {\n\t\tvar result = _f_();\n\n\t\tif (result === null) {\n\t\t\tdebug(' -- failed f ', number);\n\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = (number + '.').split('.')[1] || 0;\n\t\tdebug(' -- passed f ', result);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Visible fractional digits in n, without trailing zeros.\n\t */\n\tfunction t() {\n\t\tvar result = _t_();\n\n\t\tif (result === null) {\n\t\t\tdebug(' -- failed t ', number);\n\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = (number + '.').split('.')[1].replace(/0$/, '') || 0;\n\t\tdebug(' -- passed t ', result);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Number of visible fraction digits in n, with trailing zeros.\n\t */\n\tfunction v() {\n\t\tvar result = _v_();\n\n\t\tif (result === null) {\n\t\t\tdebug(' -- failed v ', number);\n\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = (number + '.').split('.')[1].length || 0;\n\t\tdebug(' -- passed v ', result);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Number of visible fraction digits in n, without trailing zeros.\n\t */\n\tfunction w() {\n\t\tvar result = _w_();\n\n\t\tif (result === null) {\n\t\t\tdebug(' -- failed w ', number);\n\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = (number + '.').split('.')[1].replace(/0$/, '').length || 0;\n\t\tdebug(' -- passed w ', result);\n\n\t\treturn result;\n\t}\n\n\t// operand       = 'n' | 'i' | 'f' | 't' | 'v' | 'w'\n\toperand = choice([n, i, f, t, v, w]);\n\n\t// expr          = operand (('mod' | '%') value)?\n\texpression = choice([mod, operand]);\n\n\tfunction mod() {\n\t\tvar result = sequence(\n\t\t\t[operand, whitespace, choice([_mod_, _percent_]), whitespace, value]\n\t\t);\n\n\t\tif (result === null) {\n\t\t\tdebug(' -- failed mod');\n\n\t\t\treturn null;\n\t\t}\n\n\t\tdebug(' -- passed ' + parseInt(result[0], 10) + ' ' + result[2] + ' ' + parseInt(result[4], 10));\n\n\t\treturn parseFloat(result[0]) % parseInt(result[4], 10);\n\t}\n\n\tfunction not() {\n\t\tvar result = sequence([whitespace, _not_]);\n\n\t\tif (result === null) {\n\t\t\tdebug(' -- failed not');\n\n\t\t\treturn null;\n\t\t}\n\n\t\treturn result[1];\n\t}\n\n\t// is_relation   = expr 'is' ('not')? value\n\tfunction is() {\n\t\tvar result = sequence([expression, whitespace, choice([_is_]), whitespace, value]);\n\n\t\tif (result !== null) {\n\t\t\tdebug(' -- passed is : ' + result[0] + ' == ' + parseInt(result[4], 10));\n\n\t\t\treturn result[0] === parseInt(result[4], 10);\n\t\t}\n\n\t\tdebug(' -- failed is');\n\n\t\treturn null;\n\t}\n\n\t// is_relation   = expr 'is' ('not')? value\n\tfunction isnot() {\n\t\tvar result = sequence(\n\t\t\t[expression, whitespace, choice([_isnot_, _isnot_sign_]), whitespace, value]\n\t\t);\n\n\t\tif (result !== null) {\n\t\t\tdebug(' -- passed isnot: ' + result[0] + ' != ' + parseInt(result[4], 10));\n\n\t\t\treturn result[0] !== parseInt(result[4], 10);\n\t\t}\n\n\t\tdebug(' -- failed isnot');\n\n\t\treturn null;\n\t}\n\n\tfunction not_in() {\n\t\tvar i, range_list,\n\t\t\tresult = sequence([expression, whitespace, _isnot_sign_, whitespace, rangeList]);\n\n\t\tif (result !== null) {\n\t\t\tdebug(' -- passed not_in: ' + result[0] + ' != ' + result[4]);\n\t\t\trange_list = result[4];\n\n\t\t\tfor (i = 0; i < range_list.length; i++) {\n\t\t\t\tif (parseInt(range_list[i], 10) === parseInt(result[0], 10)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tdebug(' -- failed not_in');\n\n\t\treturn null;\n\t}\n\n\t// range_list    = (range | value) (',' range_list)*\n\tfunction rangeList() {\n\t\tvar result = sequence([choice([range, value]), nOrMore(0, rangeTail)]),\n\t\t\tresultList = [];\n\n\t\tif (result !== null) {\n\t\t\tresultList = resultList.concat(result[0]);\n\n\t\t\tif (result[1][0]) {\n\t\t\t\tresultList = resultList.concat(result[1][0]);\n\t\t\t}\n\n\t\t\treturn resultList;\n\t\t}\n\n\t\tdebug(' -- failed rangeList');\n\n\t\treturn null;\n\t}\n\n\tfunction rangeTail() {\n\t\t// ',' range_list\n\t\tvar result = sequence([_comma_, rangeList]);\n\n\t\tif (result !== null) {\n\t\t\treturn result[1];\n\t\t}\n\n\t\tdebug(' -- failed rangeTail');\n\n\t\treturn null;\n\t}\n\n\t// range         = value'..'value\n\tfunction range() {\n\t\tvar i, array, left, right,\n\t\t\tresult = sequence([value, _range_, value]);\n\n\t\tif (result !== null) {\n\t\t\tdebug(' -- passed range');\n\n\t\t\tarray = [];\n\t\t\tleft = parseInt(result[0], 10);\n\t\t\tright = parseInt(result[2], 10);\n\n\t\t\tfor (i = left; i <= right; i++) {\n\t\t\t\tarray.push(i);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t}\n\n\t\tdebug(' -- failed range');\n\n\t\treturn null;\n\t}\n\n\tfunction _in() {\n\t\tvar result, range_list, i;\n\n\t\t// in_relation   = expr ('not')? 'in' range_list\n\t\tresult = sequence(\n\t\t\t[expression, nOrMore(0, not), whitespace, choice([_in_, _equal_]), whitespace, rangeList]\n\t\t);\n\n\t\tif (result !== null) {\n\t\t\tdebug(' -- passed _in:' + result);\n\n\t\t\trange_list = result[5];\n\n\t\t\tfor (i = 0; i < range_list.length; i++) {\n\t\t\t\tif (parseInt(range_list[i], 10) === parseFloat(result[0])) {\n\t\t\t\t\treturn (result[1][0] !== 'not');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (result[1][0] === 'not');\n\t\t}\n\n\t\tdebug(' -- failed _in ');\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * The difference between \"in\" and \"within\" is that\n\t * \"in\" only includes integers in the specified range,\n\t * while \"within\" includes all values.\n\t */\n\tfunction within() {\n\t\tvar range_list, result;\n\n\t\t// within_relation = expr ('not')? 'within' range_list\n\t\tresult = sequence(\n\t\t\t[expression, nOrMore(0, not), whitespace, _within_, whitespace, rangeList]\n\t\t);\n\n\t\tif (result !== null) {\n\t\t\tdebug(' -- passed within');\n\n\t\t\trange_list = result[5];\n\n\t\t\tif ((result[0] >= parseInt(range_list[0], 10)) &&\n\t\t\t\t(result[0] < parseInt(range_list[range_list.length - 1], 10))) {\n\n\t\t\t\treturn (result[1][0] !== 'not');\n\t\t\t}\n\n\t\t\treturn (result[1][0] === 'not');\n\t\t}\n\n\t\tdebug(' -- failed within ');\n\n\t\treturn null;\n\t}\n\n\t// relation      = is_relation | in_relation | within_relation\n\trelation = choice([is, not_in, isnot, _in, within]);\n\n\t// and_condition = relation ('and' relation)*\n\tfunction and() {\n\t\tvar i,\n\t\t\tresult = sequence([relation, nOrMore(0, andTail)]);\n\n\t\tif (result) {\n\t\t\tif (!result[0]) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tfor (i = 0; i < result[1].length; i++) {\n\t\t\t\tif (!result[1][i]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\tdebug(' -- failed and');\n\n\t\treturn null;\n\t}\n\n\t// ('and' relation)*\n\tfunction andTail() {\n\t\tvar result = sequence([whitespace, _and_, whitespace, relation]);\n\n\t\tif (result !== null) {\n\t\t\tdebug(' -- passed andTail' + result);\n\n\t\t\treturn result[3];\n\t\t}\n\n\t\tdebug(' -- failed andTail');\n\n\t\treturn null;\n\n\t}\n\t//  ('or' and_condition)*\n\tfunction orTail() {\n\t\tvar result = sequence([whitespace, _or_, whitespace, and]);\n\n\t\tif (result !== null) {\n\t\t\tdebug(' -- passed orTail: ' + result[3]);\n\n\t\t\treturn result[3];\n\t\t}\n\n\t\tdebug(' -- failed orTail');\n\n\t\treturn null;\n\t}\n\n\t// condition     = and_condition ('or' and_condition)*\n\tfunction condition() {\n\t\tvar i,\n\t\t\tresult = sequence([and, nOrMore(0, orTail)]);\n\n\t\tif (result) {\n\t\t\tfor (i = 0; i < result[1].length; i++) {\n\t\t\t\tif (result[1][i]) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result[0];\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tresult = condition();\n\n\t/**\n\t * For success, the pos must have gotten to the end of the rule\n\t * and returned a non-null.\n\t * n.b. This is part of language infrastructure,\n\t * so we do not throw an internationalizable message.\n\t */\n\tif (result === null) {\n\t\tthrow new Error('Parse error at position ' + pos.toString() + ' for rule: ' + rule);\n\t}\n\n\tif (pos !== rule.length) {\n\t\tdebug('Warning: Rule not parsed completely. Parser stopped at ' + rule.substr(0, pos) + ' for rule: ' + rule);\n\t}\n\n\treturn result;\n}\n\nreturn pluralRuleParser;\n\n}));\n"]}